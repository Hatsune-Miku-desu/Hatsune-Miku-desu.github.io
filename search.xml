<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一节：自动停车与岔道变轨——从0开始的MC铁路客运系统</title>
      <link href="/posts/3fbe9329.html"/>
      <url>/posts/3fbe9329.html</url>
      
        <content type="html"><![CDATA[<h1 id="Part-01-自动停车"><a href="#Part-01-自动停车" class="headerlink" title="Part 01 自动停车"></a>Part 01 自动停车</h1><p><img src="https://pic.imgdb.cn/item/66d44760d9c307b7e974ccec.png" alt="图一：计时器"></p><p><img src="https://pic.imgdb.cn/item/66d4475fd9c307b7e974cc4a.png" alt="图二：停车的方式"></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h3><p>如上图，通过两个漏斗互漏来实现。由于有红石火把作为强输入，所以左侧粘性活塞保持推的状态，同时右侧漏斗便被红石块<del>硬控</del>锁住，当矿车运行到探测铁轨，探测铁轨下的红石激活，红石火把熄灭，开始计时。</p><h3 id="停车"><a href="#停车" class="headerlink" title="停车"></a>停车</h3><p>如下图，</p><p>1.蓝色方块下的粘性活塞被激活，堵住前方<br>2.(1)矿车经过C，激活红石<br>·· (2)粘性活塞B旁的红石火把被熄灭,将铁轨右移<br>·· (3)粘性活塞A被激活，白色混凝土右移，堵住后路<br>3.当矿车运行到D时，复位</p><h1 id="Part-02-岔道变轨"><a href="#Part-02-岔道变轨" class="headerlink" title="Part 02 岔道变轨"></a>Part 02 岔道变轨</h1><p><img src="https://pic.imgdb.cn/item/66d43dc0d9c307b7e96572c9.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d4475fd9c307b7e974cbb4.png" alt=""></p><h2 id="获取标签"><a href="#获取标签" class="headerlink" title="获取标签"></a>获取标签</h2><p>1.如上图，利用漏斗堆叠物品的特性，判断箱子矿车是否含有指定物品，若有，则漏到下方漏斗<br>2.通过比较器检测漏斗物品变化，若有，输出红石信号，控制活塞变轨<br>3.将物品通过瞬投链归还<br>4.在矿车运行至A是将变轨器复位  </p><p><img src="https://pic.imgdb.cn/item/66d46b1fd9c307b7e9aad290.gif" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 从0开始的MC铁路客运系统——基于原版1.21Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> 生电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哼哼哼，啊啊啊啊啊</title>
      <link href="/posts/6763ca58.html"/>
      <url>/posts/6763ca58.html</url>
      
        <content type="html"><![CDATA[<p>终究还是要开学了啊（悲</p><p>再看向一旁的暑假作业，一息九百万匹强如怪物，怎能战胜的了口牙！！！</p><p>此处应有《开心高兴歌》</p><div class="tag link"><a class="link-card" title="开心高兴歌" href="https://www.bilibili.com/video/BV1Xe411F7bq"><div class="left"><img src="/img/siteicon/64.png"/></div><div class="right"><p class="text">开心高兴歌</p><p class="url">https://www.bilibili.com/video/BV1Xe411F7bq</p></div></a></div><p>好开心🤐</p><p>今天是最快乐😶的一天</p><p>有活力😔</p><p>想起很多美好😭的事情</p><p>继续努力😩</p><p>所有的愿望都会实现充满期待😐</p><p>还会有更美好的明天😈😈</p><p>好快乐😑好开心😟</p><p>好幸福😕好高兴😫真高兴☹️</p><p>真快乐🤐</p><p>真开心😶</p><p>好高兴🤥</p><p>说不清楚但就是高兴😵</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>幂次方</title>
      <link href="/posts/f84c9893.html"/>
      <url>/posts/f84c9893.html</url>
      
        <content type="html"><![CDATA[<h1 id="本蒟蒻的第一篇题解"><a href="#本蒟蒻的第一篇题解" class="headerlink" title="本蒟蒻的第一篇题解   "></a>本蒟蒻的第一篇题解 <img src="image.png" alt=""> <img src="image.png" alt=""> <img src="image.png" alt=""></h1><h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>任何一个正整数都可以用 $2$ 的幂次方表示。例如 $137=2^7+2^3+2^0 $。</p><p>同时约定次方用括号来表示，即 $a^b$ 可表示为 $a(b)$。</p><p>由此可知，$137$ 可表示为 $2(7)+2(3)+2(0)$</p><p>进一步：</p><p>$7= 2^2+2+2^0$  ( $2^1$ 用 $2$ 表示)，并且 $3=2+2^0$。</p><p>所以最后 $137$ 可表示为 $2(2(2)+2+2(0))+2(2+2(0))+2(0)$。</p><p>又如 $1315=2^{10} +2^8 +2^5 +2+1$</p><p>所以 $1315$ 最后可表示为 $2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)$。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行一个正整数 $n$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>符合约定的 $n$ 的 $0, 2$ 表示（在表示中不能有空格）。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1315</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据范围】</strong></p><p>对于 $100\%$ 的数据，$1 \le n \le 2 \times {10}^4$。</p><p>NOIP1998 普及组 第三题</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>对于一个正整数 $n$, 容易将其分解为 $2^a+2^b+···+2^c+(1)$(若数 $n$ 为奇数)</p><p>举个栗子，对于一个正整数 $23$, 可将其分解为 $2^4+2^2+2+1$<br>由于 $1$ 可以表达为 $2^0$<br>故原式可表达为 $2^4+2^2+2+2^0$<br>根据题意 指数也许进一步分解<br>故结果为 $2^{2^2}+2^2+2+2^0$</p><p>我们不难发现，分解出的指数还要继续分解，是重复的但规模更小的问题。故用到的方法是是递归/分治</p><p>话不多说，上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">n =<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;2&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;2(0)&quot;</span> <span class="comment">#边界</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">2</span>**i == num:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;2(&quot;</span>+change(i)+<span class="string">&quot;)&quot;</span> <span class="comment">#一个补丁，当num被分解为2**1+n时,1会被分解为2(0),而实际上1应该省略</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="number">2</span>**i &gt;num:</span><br><span class="line">                <span class="keyword">if</span> i==<span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;2+&quot;</span> + change(num - (<span class="number">2</span> ** (i - <span class="number">1</span>)))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;2(&quot;</span>+change(i-<span class="number">1</span>)+<span class="string">&quot;)+&quot;</span>+change(num-(<span class="number">2</span>**(i-<span class="number">1</span>)))</span><br><span class="line"><span class="built_in">print</span>(change(n))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些常用的颜文字 (≧∇≦)</title>
      <link href="/posts/3ef2a06e.html"/>
      <url>/posts/3ef2a06e.html</url>
      
        <content type="html"><![CDATA[<font face=黑体>( ゜- ゜)つロ  _(:з」∠)_  （⌒▽⌒）  （￣▽￣）  (=・ω・=)  (*°▽°*)八(*°▽°*)♪  ✿ヽ(°▽°)ノ✿  _(≧∇≦」∠)_  ━━━∑(ﾟ□ﾟ*川━  (｀・ω・´)  (￣3￣)  (･∀･)  (〜￣△￣)〜  ╮(￣▽￣)╭  （/TДT)/  (´；ω；`)  Σ( ￣□￣||)<  Σ(ﾟдﾟ;)  ε=ε=(ノ≧∇≦)ノ  (・ω< )★ (≧∇≦)</font>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 颜文字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记</title>
      <link href="/posts/ad4f1e09.html"/>
      <url>/posts/ad4f1e09.html</url>
      
        <content type="html"><![CDATA[<h1 id="2024-08-13"><a href="#2024-08-13" class="headerlink" title="2024/08/13"></a>2024/08/13</h1><p>我在此处先挖个坑，以后在补<del>（不是</del> <font face=黑体>_(:з」∠)_</font></p><h1 id="C-语法基础"><a href="#C-语法基础" class="headerlink" title="C++语法基础"></a>C++语法基础</h1><h2 id="标准开局"><a href="#标准开局" class="headerlink" title="标准开局"></a>标准开局</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="scanf-amp-printf"><a href="#scanf-amp-printf" class="headerlink" title="scanf&amp;printf"></a>scanf&amp;printf</h2><div class="tabs" id="scanf_and_printf"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="scanf_and_printf-1">举例示范</button><button type="button" class="tab " data-href="scanf_and_printf-2">占位符类型</button></ul><div class="tab-contents"><div class="tab-item-content active" id="scanf_and_printf-1"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> x, y;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);   <span class="comment">// 读入 x 和 y</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>, y, x);  <span class="comment">// 输出 y，换行，再输出 x</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//注：printf中不能使用std::string的变量类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* string_variable = <span class="string">&quot;Hatsune_Miku&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(string_variable);  <span class="comment">//等效于py中的str 可替代std::string</span></span><br></pre></td></tr></table></figure><p><strong><span class='p red'>upd</span> 2024/08/19</strong> 应用 <code>char[]</code> 数组的方式实现字符串</p><h3 id="获取大小"><a href="#获取大小" class="headerlink" title="获取大小"></a>获取大小</h3><p><code>sizeof()</code> 获取变量占用的字节数</p><p><code>strlen()</code> 即<code>string length</code>, 获取字符在<code>\0</code>之前的字符数量</p></div><div class="tab-item-content" id="scanf_and_printf-2"><p>1.<code>%s</code> 表示字符串。<br>2.<code>%c</code> 表示字符。<br>3.<code>%lf</code> 表示双精度浮点数 (double)。<br>4.<code>%lld</code> 表示长整型 (long long)。根据系统不同，也可能是%I64d。<br>5.<code>%u</code> 表示无符号整型 (unsigned int)。<br>6.<code>%llu</code> 表示无符号长整型 (unsigned long long)，也可能是%I64u。  </p><p>About other<br> <code>%.6lf</code>, 用于控制输出浮点数位数</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><h4 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if-else 语句"></a>if-else 语句</h4><p>以下是 if-else 语句的基本结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>)&#123;</span><br><span class="line">  主体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">  主体<span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">3</span>)&#123;</span><br><span class="line">  主体<span class="number">3</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">  主体<span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch-case-default-语句"><a href="#switch-case-default-语句" class="headerlink" title="switch-case-default 语句"></a>switch-case-default 语句</h4><div class="tabs" id="switch-case"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="switch-case-1">基本结构</button><button type="button" class="tab " data-href="switch-case-2">一些约定</button><button type="button" class="tab " data-href="switch-case-3">举例示范</button></ul><div class="tab-contents"><div class="tab-item-content active" id="switch-case-1"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (选择句) &#123;</span><br><span class="line">  <span class="keyword">case</span> 标签<span class="number">1</span>:</span><br><span class="line">    主体<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">case</span> 标签<span class="number">2</span>:</span><br><span class="line">    主体<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    主体<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="switch-case-2"><p>switch 语句执行时，先求出选择句的值，然后根据选择句的值选择相应的标签，从标签处开始执行。  </p><p><span class='p red'><strong>特别的</strong></span> switch 语句中还要根据需求加入 break 语句进行中断，否则在对应的 case 被选择之后接下来的所有 case 里的语句和 default 里的语句都会被运行。</p><p><span class='p red'><strong>同样的</strong></span> switch 的 case 分句中也可以选择性的加花括号。不过要注意的是，如果需要在 switch 语句中定义变量，花括号是必须要加的。</p></div><div class="tab-item-content" id="switch-case-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    <span class="keyword">switch</span>(a)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Hatsune Miku&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Len&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Rin&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Luo Tianyi&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><div class="tabs" id="for"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="for-1">基本结构</button><button type="button" class="tab " data-href="for-2">执行顺序</button><button type="button" class="tab " data-href="for-3">举例示范</button></ul><div class="tab-contents"><div class="tab-item-content active" id="for-1"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化; 判断条件; 更新) &#123;</span><br><span class="line">  循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="for-2"><p><img src="https://oi-wiki.org/lang/images/for-loop.svg" alt="执行顺序"></p></div><div class="tab-item-content" id="for-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::string name = <span class="string">&quot;Luo Tianyi&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123; <span class="comment">//0-9</span></span><br><span class="line">        cout&lt;&lt;name[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//out:L u o   T i a n y i</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><div class="tabs" id="while"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="while-1">基本结构</button><button type="button" class="tab " data-href="while-2">执行顺序</button><button type="button" class="tab " data-href="while-3">举例示范</button></ul><div class="tab-contents"><div class="tab-item-content active" id="while-1"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (判断条件)&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="while-2"><p><img src="https://oi-wiki.org/lang/images/while-loop.svg" alt="执行顺序"></p></div><div class="tab-item-content" id="while-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n&lt;<span class="number">101</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n%<span class="number">2</span>)&#123;</span><br><span class="line">            cout&lt;&lt;n&lt;&lt;<span class="string">&quot;  &quot;</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        n++;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1-100的所有奇数</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h4><div class="tabs" id="while"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="while-1">基本结构</button><button type="button" class="tab " data-href="while-2">执行顺序</button></ul><div class="tab-contents"><div class="tab-item-content active" id="while-1"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  循环体;</span><br><span class="line">&#125; <span class="keyword">while</span> (判断条件);</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="while-2"><p><img src="https://oi-wiki.org/lang/images/do-while-loop.svg" alt="执行顺序"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="break-与-continue-语句"><a href="#break-与-continue-语句" class="headerlink" title="break 与 continue 语句"></a>break 与 continue 语句</h4><p><code>break</code> 语句的作用是退出循环。</p><p><code>continue</code> 语句的作用是跳过循环体的余下部分。</p><hr><h2 id="高级数据类型"><a href="#高级数据类型" class="headerlink" title="高级数据类型"></a>高级数据类型</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>_数组是存放相同类型对象的容器，数组中存放的对象没有名字，而是要通过其所在的位置访问。数组的大小是固定的，不能随意改变数组的长度。_</p><div class="tabs" id="num_list"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="num_list-1">定义数组</button><button type="button" class="tab " data-href="num_list-2">访问数组</button></ul><div class="tab-contents"><div class="tab-item-content active" id="num_list-1"><p>数组的声明形如 <code>a[d]</code>, a 是数组的名字，d 是数组中元素的个数, d 应该是一个整型的常量表达式。</p><p><span class='p red'><strong>tips:</strong></span> 应该尽量将较大的数组定义为全局变量。因为局部变量会被创建在栈区中，过大（大于栈的大小）的数组会爆栈，进而导致 RE。如果将数组声明在全局作用域中，就会在静态区中创建数组。</p></div><div class="tab-item-content" id="num_list-2"><p><strong>与py类似</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><div class="tabs" id="struct"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="struct-1">定义结构体&创建变量</button><button type="button" class="tab " data-href="struct-2">初始化结构体</button><button type="button" class="tab " data-href="struct-3">tips</button></ul><div class="tab-contents"><div class="tab-item-content active" id="struct-1"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="comment">//在内部创建你需要的数据类型</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">&#125; stu ;<span class="comment">//stu是变量</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="struct-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*struct student stu = &#123;&quot;Luo Tianyi&quot;,24,&quot;m&quot;&#125;;</span></span><br><span class="line"><span class="comment">    return 0;   定义后直接初始化*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*struct student stu;</span></span><br><span class="line"><span class="comment">    strcpy(stu.name,&quot;Hatsune Miku&quot;);//char类型要用strcpy()函数</span></span><br><span class="line"><span class="comment">    stu.age = 24;</span></span><br><span class="line"><span class="comment">    strcpy(stu.sex,&quot;f&quot;);    先声明，再赋值*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注：定义好结构体后如果不直接进行初始化，那么在后续的给结构体中内容赋值时不能在一次性全部赋值了。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//struct student stu = &#123;.age=24,.name=&quot;Luo Tianyi&quot;,.sex=&quot;f&quot;&#125;; 未知报错</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//当我们想使用结构体中的内容时，我们只需要用 structName.variableName 即可。</span></span><br><span class="line">    cout&lt;&lt;stu.name&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;stu.age&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;stu.sex&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="struct-3"><p><code>strcpy(a,b)</code></p><p>strcpy，即string copy（字符串复制）的缩写。</p><p>strcpy是C++语言的一个标准函数，<code>strcpy()</code>把含有’\0’结束符的字符串<span class='p red'><strong>复制到另一个地址空间</strong></span>，返回值的类型为char*。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="联合体"><a href="#联合体" class="headerlink" title="联合体"></a>联合体</h3><details class="folding-tag" ><summary> 查看全部(・ω< )★ </summary>              <div class='content'>              <p>_联合体（union）是特殊的类类型，它在一个时刻只能保有其一个非静态数据成员。_</p><p><strong><em>联合体在 2023 年正式被加入 NOI 大纲入门级中。</em></strong></p><p>定义联合体<br>联合体声明的类说明符与类或 结构体 的声明相似：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">MyUnion</span> &#123;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> y;</span><br><span class="line">&#125; x;</span><br></pre></td></tr></table></figure></p><p>联合体的定义与结构体类似。按照上述定义，MyUnion 同样可以当作一种自定义类型使用。名称 MyUnion 可以省略。</p><p>访问/修改成员元素<br>与结构体类似，同样可以使用 变量名.成员名 进行访问。</p><p>联合体所占用的内存空间大小 不小于 其最大的成员的大小，所有成员 共用内存空间与地址。当一个成员被赋值，由于内存共享，该联合体中的其他成员都会被覆盖。即同一时刻联合体中只能保存一个成员的值。</p>              </div>            </details><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><details class="folding-tag" ><summary> 查看全部(・ω< )★ </summary>              <div class='content'>              <p><strong><em>指针是一个变量，可以存储一个对象的内存地址。</em></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1145</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">1919</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *pointerA = &amp;a;</span><br><span class="line">    <span class="type">int</span> *pointerB = &amp;b;</span><br><span class="line"></span><br><span class="line">    *pointerB-=*pointerA;</span><br><span class="line">    cout&lt;&lt;*pointerA&lt;&lt;endl&lt;&lt;*pointerB&lt;&lt;endl&lt;&lt;a&lt;&lt;endl&lt;&lt;b;</span><br><span class="line"><span class="comment">//1145 774 1145 774</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中通过 <code>&amp;</code> —— 取地址操作符 来使指针 pointerA,pointerB 取到 a,b 的地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *pointerA = &amp;a;</span><br></pre></td></tr></table></figure><p>这⾥pointerA左边写的是 <code>int*</code> ， * 是在说明pointerA是指针变量，⽽前⾯的 int 是在说明 pointerA 指向的是整型(int)类型的对象。</p><p>在C++中，我们我们只要拿到了地址（指针），就可以通过地址找到地址指向的对象，这⾥必须学习⼀个操作符叫解引⽤操作符 <code>*</code> 用法如上述代码</p>              </div>            </details><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">function</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>; </span><br></pre></td></tr></table></figure><p><strong>第一个int：</strong> <code>return</code> 返回的值， <span class='p red'>**特别的**</span> 若函数没有返回值，则函数类型为<code>void</code>类型</p><p><strong>括号中的int：</strong> 传入的值的类型</p><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">function</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span class='p red'>**特别的**</span> 在同一文件中，可将函数的声明与定义整合在一起<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> _and_(<span class="type">int</span> a, <span class="type">int</span> b)&#123;</span><br><span class="line">    a++;</span><br><span class="line">    b++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">3</span>;</span><br><span class="line">    _and_(x,y);</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y;</span><br><span class="line"><span class="comment">//2 3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，在 __and__ 中对变量 a 和 b 的修改，并不会影响到<span class="bubble-content">调用处的变量 </span><span class="bubble-notation"><span class="bubble-item" style="background-color:y ;"> 即变量x</span></span>的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> _and_(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)&#123;</span><br><span class="line">    a++;</span><br><span class="line">    b++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，我们看到函数参数列表中的「<code>int</code>」后面添加了一个「<code>&amp;</code>（and）」，这表示对于 <code>int</code> 类型的 引用（reference）。</p><p>在调用 __and__ 时，在 __and__ 中的 a 和 b，可以理解为调用处 x 和 y 变量的「别名」，即 __and__ 中对 a 和 b 的操作，就是对调用处 x 和 y 的操作。</p><hr><h1 id="C-标准库"><a href="#C-标准库" class="headerlink" title="C++ 标准库"></a>C++ 标准库</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><details class="folding-tag" ><summary> 查看简介(・ω< )★ </summary>              <div class='content'>              <p>首先需要介绍的是 C++ 本身的版本。由于 C++ 本身只是一门语言，而不同的编译器对 C++ 的实现方法各不一致，因此需要标准化来约束编译器的实现，使得 C++ 代码在不同的编译器下表现一致。C++ 自 1985 年诞生以来，一共由国际标准化组织（ISO）发布了 5 个正式的 C++ 标准，依次为 C++98、C++03、C++11（亦称 C++0x）、C++14（亦称 C++1y）、C++17（亦称 C++1z）、C++20（亦称 C++2a）。C++ 标准草案在 open-std 网站上，最新的标准 C++23（亦称 C++2b）仍在制定中。此外还有一些补充标准，例如 C++ TR1。</p><p>每一个版本的 C++ 标准不仅规定了 C++ 的语法、语言特性，还规定了一套 C++ 内置库的实现规范，这个库便是 C++ 标准库。C++ 标准库中包含大量常用代码的实现，如输入输出、基本数据结构、内存管理、多线程支持等。掌握 C++ 标准库是编写更现代的 C++ 代码必要的一步。C++ 标准库的详细文档在 cppreference 网站上，文档对标准库中的类型函数的用法、效率、注意事项等都有介绍，请善用。</p><p>需要指出的是，不同的 OJ 平台对 C++ 版本均不相同，例如 最新的 ICPC 比赛规则 支持 C++20 标准。根据 NOI 科学委员会决议，自 2021 年 9 月 1 日起 NOI Linux 2.0 作为 NOI 系列比赛和 CSP-J/S 等活动的标准环境使用。NOI Linux 2.0 中指定的 g++ 9.3.0 默认支持标准 为 C++14，并支持 C++17 标准，可以满足绝大部分竞赛选手的需求。因此在学习 C++ 时要注意比赛支持的标准，避免在赛场上时编译报错。</p><p>STL 即标准模板库（Standard Template Library），是 C++ 标准库的一部分，里面包含了一些模板化的通用的数据结构和算法。由于其模板化的特点，它能够兼容自定义的数据类型，避免大量的造轮子工作。NOI 和 ICPC 赛事都支持 STL 库的使用，因此合理利用 STL 可以避免编写无用算法，并且充分利用编译器对模板库优化提高效率。</p>              </div>            </details>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外挂标签 tip</title>
      <link href="/posts/35afea00.html"/>
      <url>/posts/35afea00.html</url>
      
        <content type="html"><![CDATA[<h1 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h1><div class="tabs" id="up_tip"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="up_tip-1">语法格式</button><button type="button" class="tab " data-href="up_tip-2">样式预览</button><button type="button" class="tab " data-href="up_tip-3">举例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="up_tip-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="up_tip-2"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div></div><div class="tab-item-content" id="up_tip-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><h1 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h1><div class="tabs" id="parts"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="parts-1">语法格式</button><button type="button" class="tab " data-href="parts-2">样式预览</button><button type="button" class="tab " data-href="parts-3">举例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="parts-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name %&#125;</span><br><span class="line">&lt;!-- tab [Tab name] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="parts-2"><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">Miku</button><button type="button" class="tab " data-href="test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button><button type="button" class="tab " data-href="test4-3"><i class="fas fa-bomb"></i>炸弹</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>watashi Miku desu</strong></p></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="parts-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab Miku --&gt;</span><br><span class="line"><span class="strong">**watashi Miku desu**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><h1 id="行内文本样式"><a href="#行内文本样式" class="headerlink" title="行内文本样式"></a>行内文本样式</h1><div class="tabs" id="deifferent_kinds_words"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="deifferent_kinds_words-1">语法格式</button><button type="button" class="tab " data-href="deifferent_kinds_words-2">样式预览</button><button type="button" class="tab " data-href="deifferent_kinds_words-3">举例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="deifferent_kinds_words-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="deifferent_kinds_words-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>你知道的太多啦</psw></li></ol></div><div class="tab-item-content" id="deifferent_kinds_words-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 你知道的太多啦 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><h1 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h1><div class="tabs" id="span"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="span-1">语法格式</button><button type="button" class="tab " data-href="span-2">样式预览</button><button type="button" class="tab " data-href="span-3">举例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="span-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="span-2"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul></div><div class="tab-item-content" id="span-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><h1 id="图片-image"><a href="#图片-image" class="headerlink" title="图片 image"></a>图片 image</h1><h2 id="行内图片-in-line-image"><a href="#行内图片-in-line-image" class="headerlink" title="行内图片 in_line_image"></a>行内图片 in_line_image</h2><p><code>&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</code></p><h2 id="行间图片-mid-line-image"><a href="#行间图片-mid-line-image" class="headerlink" title="行间图片 mid_line_image"></a>行间图片 mid_line_image</h2><p><code>&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</code></p><hr><h1 id="本文节选自akilar大佬-・ω・"><a href="#本文节选自akilar大佬-・ω・" class="headerlink" title="本文节选自akilar大佬(=・ω・=)"></a><strong>本文节选自akilar大佬</strong><font face=黑体>(=・ω・=)</font></h1><h2 id="原网址-https-akilar-top-posts-615e2dec"><a href="#原网址-https-akilar-top-posts-615e2dec" class="headerlink" title="原网址 https://akilar.top/posts/615e2dec"></a>原网址 <a href="https://akilar.top/posts/615e2dec">https://akilar.top/posts/615e2dec</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站公告</title>
      <link href="/posts/6f91a4f7.html"/>
      <url>/posts/6f91a4f7.html</url>
      
        <content type="html"><![CDATA[<h2 id="本站在2024-08-12-正！式！建！站！啦！-°▽°-八-°▽°-♪"><a href="#本站在2024-08-12-正！式！建！站！啦！-°▽°-八-°▽°-♪" class="headerlink" title="本站在2024/08/12 正！式！建！站！啦！(°▽°)八(°▽°)♪"></a>本站在2024/08/12 正！式！建！站！啦！<font face=黑体>(<em>°▽°</em>)八(<em>°▽°</em>)♪</font></h2><div class="timeline blue]"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>项目历程[</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/08/09</p></div></div><div class='timeline-item-content'><p>在逛小破站时发现可以<span class="bubble-content">通过Hexo+Github </span><span class="bubble-notation"><span class="bubble-item" style="background-color:#39c5bb;"> 其实是因为可以白嫖（闪</span>&lt;/span&gt;来构建一个属于自己的Blog  </p><p>项目正式立项，可喜可贺可喜可贺<font face=黑体>✿ヽ(°▽°)ノ✿</font></p><p>至此，一锤定音  </p><p>尘埃，已然落定（逃</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/08/10</p></div></div><div class='timeline-item-content'><p>在翻hexo主题时看见了「Kratos-Rebirth」，<span class="bubble-content">于是就选择了「Kratos-Rebirth </span><span class="bubble-notation"><span class="bubble-item" style="background-color:#39c5bb;"> 没办法它实在是太二次元了（摊手 </span>&lt;/span&gt;</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/08/11</p></div></div><div class='timeline-item-content'><p>在不断的修bug后可算得到的一个能看的Blog，直到我看到的anzhiyu大佬的魔改「Butterfly」，手里的Blog瞬间就不香了 </p><p>Butterfly 启动！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024/08/12</p></div></div><div class='timeline-item-content'><p><span class="bubble-content">在对着视频捯饬了几天后 </span><span class="bubble-notation"><span class="bubble-item" style="background-color:#39c5bb;"> 还删掉了很多的功能组件（ </span>&lt;/span&gt;，可算憋出来了（欣慰  </p><p>Miku’s Blog 堂堂完结</p></div></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic.imgdb.cn/item/66b4d64ed9c307b7e94ec1c1.gif ,alt=完结撒花(・ω< )★"/></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 站务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站工作阶段性总结(=・ω・=)</title>
      <link href="/posts/4449646b.html"/>
      <url>/posts/4449646b.html</url>
      
        <content type="html"><![CDATA[<h2 id="用时：3天"><a href="#用时：3天" class="headerlink" title="用时：3天"></a>用时：3天</h2><hr><p>工作成果：</p><p>1.搜索栏配置( ゜- ゜)つロ</p><p>2.追番页面配置_(≧∇≦」∠)_</p><p>3.background的配置✿ヽ(°▽°)ノ✿</p>]]></content>
      
      
      
        <tags>
            
            <tag> 站务 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"Miku's Blog","short_name":"Miku's blog (=・ω・=)","theme_color":"#66ccff","background_color":"#66ccff","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明*/   #footer {    background: transparent !important;  }    /*头图透明*/  #page-header {    background: transparent !important;  }     #rightside > div > button {    border-radius: 5px;  }     /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }/* tags样式 */#aside-content .card-tag-cloud a {  color: var(--anzhiyu-fontcolor) !important;  font-size: 1.05rem !important;  border-radius: 8px;  display: inline-block;  margin-right: 4px;}#aside-content .card-tag-cloud a:hover {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-white) !important;  box-shadow: var(--anzhiyu-shadow-theme);}@media screen and (min-width: 1300px) {  #aside-content .card-tag-cloud a:hover {    transform: scale(1.03);  }  #aside-content .card-tag-cloud a:active {    transform: scale(0.97);  }}#aside-content .card-tag-cloud a sup {  opacity: 0.4;  margin-left: 2px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() { var t = new Date("08/11/2024 20:52:00"); now.setTime(now.getTime() + 250); var e = (now - t) / 1e3 / 60 / 60 / 24, a = Math.floor(e), n = (now - t) / 1e3 / 60 / 60 - 24 * a, r = Math.floor(n); 1 == String(r).length && (r = "0" + r); var s = (now - t) / 1e3 / 60 - 1440 * a - 60 * r, i = Math.floor(s); 1 == String(i).length && (i = "0" + i); var o = (now - t) / 1e3 - 86400 * a - 3600 * r - 60 * i, l = Math.round(o); 1 == String(l).length && (l = "0" + l); let g = ""; g = r < 18 && r >= 9 ? `<img class='boardsign' src='' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站已经苟活了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 ✿ヽ(°▽°)ノ✿ </span> <i class='fas fa-heartbeat' style='color:red'></i>` : `<img class='boardsign' src='' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站已经苟活了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒(ﾟДﾟ≡ﾟдﾟ)!? </span> <i class='fas fa-heartbeat' style='color:red'></i>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = g) } setInterval((() => { createtime() }), 250);]]></content>
      
    </entry>
    
    
  
</search>
